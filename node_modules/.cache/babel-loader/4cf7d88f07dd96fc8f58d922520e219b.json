{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\18083\\\\Documents\\\\GitHub\\\\delaine-organizer-app\\\\src\\\\makeRandomPost.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { updateDoc, getFirestore, collection, getDocs, deleteDoc, addDoc, doc } from \"firebase/firestore\";\nimport { useAuth } from \"./firebase\";\nimport { theDate } from \"./Utilities/theDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RandomPost() {\n  _s();\n\n  const db = getFirestore();\n  const currentUser = useAuth();\n  const colRef = collection(db, \"posts\");\n  const [post, setPost] = useState(\"\");\n  const [dataBaseItems, setDatabaseItems] = useState([]);\n  const [updating, setUpdating] = useState(false);\n  const [editedEntry, setEditedEntry] = useState(\"\");\n\n  function addItem(e) {\n    e.preventDefault();\n    addDoc(colRef, {\n      date: new Date(),\n      displayDate: theDate,\n      author: currentUser === null || currentUser === void 0 ? void 0 : currentUser.email,\n      post: post,\n      active: false,\n      comments: []\n    });\n    setPost(\"\");\n    fetchItems();\n  }\n\n  function fetchItems() {\n    getDocs(colRef).then(snapshot => {\n      const items = snapshot.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      }));\n      console.log(items);\n      setDatabaseItems(items);\n    });\n  }\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  function updateItem(itemToUpdate) {\n    console.log(\"To be UPDATED \" + itemToUpdate);\n\n    if (itemToUpdate !== \"\") {\n      console.log(\"Updating\");\n      const docToUpdate = doc(db, \"posts\", itemToUpdate);\n      updateDoc(docToUpdate, {\n        post: editedEntry\n      }).then(() => {\n        console.log(\"It supposed to be updated\");\n      });\n      setUpdating(false);\n      fetchItems();\n    }\n  }\n\n  function deleteItem(itemToDelete) {\n    console.log(\"To be Deleted \" + itemToDelete);\n\n    if (itemToDelete !== \"\") {\n      console.log(\"Deleting\");\n      const docToDelete = doc(db, \"posts\", itemToDelete);\n      deleteDoc(docToDelete).then(() => {\n        console.log(\"It supposed to be deleted\");\n      });\n      fetchItems();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"category\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Make a post, any post you like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"post-component\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"4\",\n            cols: \"50\",\n            value: post,\n            onChange: e => setPost(e.target.value),\n            type: \"text\",\n            name: \"post\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-post\",\n          onClick: addItem,\n          children: \"Add Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Post List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item-grid\",\n        children: dataBaseItems.map((database, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"insertedItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"date\",\n            children: database.displayDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", database.post]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), \"Added by: \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: database.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 48\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), updating ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Change post to:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              value: editedEntry,\n              onChange: e => setEditedEntry(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                updateItem(database.id);\n              },\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit\",\n            onClick: e => {\n              setUpdating(true);\n            },\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete\",\n            onClick: e => {\n              deleteItem(database.id);\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)]\n        }, database.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RandomPost, \"F5OX7jZDNDkFOllBifzkNO4toE0=\", false, function () {\n  return [useAuth];\n});\n\n_c = RandomPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"RandomPost\");","map":{"version":3,"sources":["C:/Users/18083/Documents/GitHub/delaine-organizer-app/src/makeRandomPost.js"],"names":["useState","useEffect","updateDoc","getFirestore","collection","getDocs","deleteDoc","addDoc","doc","useAuth","theDate","RandomPost","db","currentUser","colRef","post","setPost","dataBaseItems","setDatabaseItems","updating","setUpdating","editedEntry","setEditedEntry","addItem","e","preventDefault","date","Date","displayDate","author","email","active","comments","fetchItems","then","snapshot","items","docs","map","data","id","console","log","updateItem","itemToUpdate","docToUpdate","deleteItem","itemToDelete","docToDelete","target","value","database"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {\r\n  updateDoc,\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  deleteDoc,\r\n  addDoc,\r\n  doc,\r\n} from \"firebase/firestore\";\r\nimport { useAuth } from \"./firebase\";\r\nimport { theDate } from \"./Utilities/theDate\";\r\n\r\nexport default function RandomPost() {\r\n  const db = getFirestore();\r\n\r\n  const currentUser = useAuth();\r\n\r\n  const colRef = collection(db, \"posts\");\r\n\r\n  const [post, setPost] = useState(\"\");\r\n  const [dataBaseItems, setDatabaseItems] = useState([]);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [editedEntry, setEditedEntry] = useState(\"\");\r\n\r\n  function addItem(e) {\r\n    e.preventDefault();\r\n\r\n    addDoc(colRef, {\r\n      date: new Date(),\r\n      displayDate: theDate,\r\n      author: currentUser?.email,\r\n      post: post,\r\n      active: false,\r\n      comments: [],\r\n    });\r\n    setPost(\"\");\r\n    fetchItems();\r\n  }\r\n\r\n  function fetchItems() {\r\n    getDocs(colRef).then((snapshot) => {\r\n      const items = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      console.log(items);\r\n      setDatabaseItems(items);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  function updateItem(itemToUpdate) {\r\n    console.log(\"To be UPDATED \" + itemToUpdate);\r\n    if (itemToUpdate !== \"\") {\r\n      console.log(\"Updating\");\r\n      const docToUpdate = doc(db, \"posts\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        post: editedEntry,\r\n      }).then(() => {\r\n        console.log(\"It supposed to be updated\");\r\n      });\r\n      setUpdating(false);\r\n\r\n      fetchItems();\r\n    }\r\n  }\r\n\r\n  function deleteItem(itemToDelete) {\r\n    console.log(\"To be Deleted \" + itemToDelete);\r\n    if (itemToDelete !== \"\") {\r\n      console.log(\"Deleting\");\r\n      const docToDelete = doc(db, \"posts\", itemToDelete);\r\n      deleteDoc(docToDelete).then(() => {\r\n        console.log(\"It supposed to be deleted\");\r\n      });\r\n      fetchItems();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div  className=\"category\">\r\n    \r\n  \r\n      <div>\r\n      <h1> Make a post, any post you like</h1>\r\n\r\n      <form className=\"post-component\">\r\n        <div>\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          value={post}\r\n          onChange={(e) => setPost(e.target.value)}\r\n          type=\"text\"\r\n          name=\"post\"\r\n          required\r\n        /></div>\r\n        <button className=\"add-post\" onClick={addItem}>Add Post</button>\r\n      </form>\r\n        {\" \"}\r\n        <h2>Post List</h2>\r\n        <div className=\"item-grid\">\r\n          {dataBaseItems.map((database, id) => (\r\n            <div className=\"insertedItem\" key={database.id}>\r\n              <p className=\"date\">{database.displayDate}</p>\r\n              <p> {database.post}</p>Added by: <i>{database.author}</i>\r\n              <br />\r\n              {updating ? (\r\n                <div>\r\n                  {\" \"}\r\n                  <p>Change post to:</p>\r\n                  <input\r\n                    value={editedEntry}\r\n                    onChange={(e) => setEditedEntry(e.target.value)}\r\n                  />{\" \"}\r\n                  <button\r\n                    onClick={(e) => {\r\n                      updateItem(database.id);\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n              <br />\r\n              <button\r\n                            className=\"edit\"\r\n\r\n                onClick={(e) => {\r\n                  setUpdating(true);\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                className=\"delete\"\r\n                onClick={(e) => {\r\n                  deleteItem(database.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}