{"ast":null,"code":"var _jsxFileName = \"/Users/delaine/Documents/GitHub/Untitled/src/LoggedIn.js\",\n    _s = $RefreshSig$();\n\nimport { createElement, useState, useEffect } from \"react\";\nimport { FieldValue, getFirestore, collection, getDocs, deleteDoc, addDoc, doc } from \"firebase/firestore\";\nimport { useAuth } from \"./firebase\";\nimport { theDate } from \"./Utilities/theDate\";\nimport RandomPost from \"./makeRandomPost\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoggedIn() {\n  _s();\n\n  const db = getFirestore();\n  const currentUser = useAuth();\n  const colRef = collection(db, \"posts\");\n  const [author, setAuthor] = useState(\"\");\n  const [post, setPost] = useState(\"\");\n  const [itemToDelete, setItemToDelete] = useState(\"\");\n  const [dataBaseItems, setDatabaseItems] = useState([]);\n\n  function addPost(e) {\n    e.preventDefault();\n    addDoc(colRef, {\n      date: new Date(),\n      displayDate: theDate,\n      author: currentUser === null || currentUser === void 0 ? void 0 : currentUser.email,\n      post: post\n    });\n    setPost(\"\");\n    fetchPosts();\n  }\n\n  function fetchPosts() {\n    getDocs(colRef).then(snapshot => {\n      const items = snapshot.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      }));\n      console.log(items);\n      setDatabaseItems(items);\n      dataBaseItems.sort((a, b) => b.joinDate < a.joinDate ? 1 : -1);\n    });\n  }\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  function deletePost(e) {\n    console.log(\"To be Deleted \" + itemToDelete);\n\n    if (itemToDelete != \"\") {\n      console.log(\"Deleting\");\n      const docToDelete = doc(db, \"posts\", itemToDelete);\n      deleteDoc(docToDelete).then(() => {\n        console.log(\"It supposed to be deleted\");\n      });\n      fetchPosts();\n    } // myDb.collection(\"posts\").doc(itemToDelete).delete();\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Hey: \", currentUser === null || currentUser === void 0 ? void 0 : currentUser.email, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RandomPost, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoggedIn, \"Ni6AUc0oyi6Mb78sVTu0j6/oc78=\", false, function () {\n  return [useAuth];\n});\n\n_c = LoggedIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoggedIn\");","map":{"version":3,"sources":["/Users/delaine/Documents/GitHub/Untitled/src/LoggedIn.js"],"names":["createElement","useState","useEffect","FieldValue","getFirestore","collection","getDocs","deleteDoc","addDoc","doc","useAuth","theDate","RandomPost","LoggedIn","db","currentUser","colRef","author","setAuthor","post","setPost","itemToDelete","setItemToDelete","dataBaseItems","setDatabaseItems","addPost","e","preventDefault","date","Date","displayDate","email","fetchPosts","then","snapshot","items","docs","map","data","id","console","log","sort","a","b","joinDate","deletePost","docToDelete"],"mappings":"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","sourcesContent":["import { createElement, useState, useEffect } from \"react\";\nimport {\n  FieldValue,\n  getFirestore,\n  collection,\n  getDocs,\n  deleteDoc,\n  addDoc,\n  doc,\n} from \"firebase/firestore\";\nimport { useAuth } from \"./firebase\";\nimport { theDate } from \"./Utilities/theDate\";\nimport RandomPost from \"./makeRandomPost\";\nexport default function LoggedIn() {\n  const db = getFirestore();\n\n  const currentUser = useAuth();\n\n  const colRef = collection(db, \"posts\");\n\n  const [author, setAuthor] = useState(\"\");\n  const [post, setPost] = useState(\"\");\n  const [itemToDelete, setItemToDelete] = useState(\"\");\n  const [dataBaseItems, setDatabaseItems] = useState([]);\n\n  function addPost(e) {\n    e.preventDefault();\n\n    addDoc(colRef, {\n      date: new Date(),\n      displayDate: theDate,\n      author: currentUser?.email,\n      post: post,\n    });\n    setPost(\"\");\n    fetchPosts();\n  }\n\n  function fetchPosts() {\n    getDocs(colRef).then((snapshot) => {\n      const items = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      console.log(items);\n\n      setDatabaseItems(items);\n      dataBaseItems.sort((a, b) => (b.joinDate < a.joinDate ? 1 : -1));\n    });\n  }\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  function deletePost(e) {\n    console.log(\"To be Deleted \" + itemToDelete);\n    if (itemToDelete != \"\") {\n      console.log(\"Deleting\");\n      const docToDelete = doc(db, \"posts\", itemToDelete);\n      deleteDoc(docToDelete).then(() => {\n        console.log(\"It supposed to be deleted\");\n      });\n      fetchPosts();\n    }\n    // myDb.collection(\"posts\").doc(itemToDelete).delete();\n  }\n  return (\n    <div>\n      <div>Hey: {currentUser?.email} </div>\n\n      <RandomPost />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}