[{"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\index.js":"1","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\App.js":"2","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\redux\\store\\index.js":"3","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\dashboard.js":"4","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\makeRandomPost.js":"5","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\navbar.js":"6","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\ShowsToWatch.js":"7","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\CurrentSubScriptions.js":"8","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\places.js":"9","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\watch.js":"10","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\activities.js":"11","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\loggedOut.js":"12","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\firebase.js":"13","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\LoggedIn.js":"14","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\Utilities\\theDate.js":"15","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\redux\\reducers\\index.js":"16","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\redux\\actions\\index.js":"17","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\auth.js":"18","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\redux\\types\\index.js":"19"},{"size":413,"mtime":1642314810647,"results":"20","hashOfConfig":"21"},{"size":1730,"mtime":1642308917229,"results":"22","hashOfConfig":"21"},{"size":387,"mtime":1641871059657,"results":"23","hashOfConfig":"21"},{"size":397,"mtime":1642315122399,"results":"24","hashOfConfig":"21"},{"size":3958,"mtime":1642395119092,"results":"25","hashOfConfig":"21"},{"size":1237,"mtime":1642394783828,"results":"26","hashOfConfig":"21"},{"size":14560,"mtime":1642391622931,"results":"27","hashOfConfig":"21"},{"size":5093,"mtime":1642400700735,"results":"28","hashOfConfig":"21"},{"size":3047,"mtime":1642386695579,"results":"29","hashOfConfig":"21"},{"size":1695,"mtime":1642314927492,"results":"30","hashOfConfig":"21"},{"size":4661,"mtime":1642395035027,"results":"31","hashOfConfig":"21"},{"size":150,"mtime":1642314902588,"results":"32","hashOfConfig":"21"},{"size":1631,"mtime":1641871059657,"results":"33","hashOfConfig":"21"},{"size":2541,"mtime":1642314834576,"results":"34","hashOfConfig":"21"},{"size":681,"mtime":1641871059657,"results":"35","hashOfConfig":"21"},{"size":336,"mtime":1641871059657,"results":"36","hashOfConfig":"21"},{"size":465,"mtime":1641871059657,"results":"37","hashOfConfig":"21"},{"size":1855,"mtime":1642303652978,"results":"38","hashOfConfig":"21"},{"size":53,"mtime":1641871059657,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6ixfo6",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\index.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\App.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\redux\\store\\index.js",[],["86","87"],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\dashboard.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\makeRandomPost.js",["88"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  updateDoc,\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  deleteDoc,\r\n  addDoc,\r\n  doc,\r\n} from \"firebase/firestore\";\r\nimport { useAuth } from \"./firebase\";\r\nimport { theDate } from \"./Utilities/theDate\";\r\n\r\nexport default function RandomPost() {\r\n  const db = getFirestore();\r\n\r\n  const currentUser = useAuth();\r\n\r\n  const colRef = collection(db, \"posts\");\r\n\r\n  const [post, setPost] = useState(\"\");\r\n  const [dataBaseItems, setDatabaseItems] = useState([]);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [editedEntry, setEditedEntry] = useState(\"\");\r\n\r\n  function addItem(e) {\r\n    e.preventDefault();\r\n\r\n    addDoc(colRef, {\r\n      date: new Date(),\r\n      displayDate: theDate,\r\n      author: currentUser?.email,\r\n      post: post,\r\n      active: false,\r\n      comments: [],\r\n    });\r\n    setPost(\"\");\r\n    fetchItems();\r\n  }\r\n\r\n  function fetchItems() {\r\n    getDocs(colRef).then((snapshot) => {\r\n      const items = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      console.log(items);\r\n      setDatabaseItems(items);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  function updateItem(itemToUpdate) {\r\n    console.log(\"To be UPDATED \" + itemToUpdate);\r\n    if (itemToUpdate !== \"\") {\r\n      console.log(\"Updating\");\r\n      const docToUpdate = doc(db, \"posts\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        post: editedEntry,\r\n      }).then(() => {\r\n        console.log(\"It supposed to be updated\");\r\n      });\r\n      setUpdating(false);\r\n\r\n      fetchItems();\r\n    }\r\n  }\r\n\r\n  function deleteItem(itemToDelete) {\r\n    console.log(\"To be Deleted \" + itemToDelete);\r\n    if (itemToDelete !== \"\") {\r\n      console.log(\"Deleting\");\r\n      const docToDelete = doc(db, \"posts\", itemToDelete);\r\n      deleteDoc(docToDelete).then(() => {\r\n        console.log(\"It supposed to be deleted\");\r\n      });\r\n      fetchItems();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div  className=\"category\">\r\n    \r\n  \r\n      <div>\r\n      <h1> Make a post, any post you like</h1>\r\n\r\n      <form className=\"post-component\">\r\n        <div>\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          value={post}\r\n          onChange={(e) => setPost(e.target.value)}\r\n          type=\"text\"\r\n          name=\"post\"\r\n          required\r\n        /></div>\r\n        <button className=\"add-post\" onClick={addItem}>Add Post</button>\r\n      </form>\r\n        {\" \"}\r\n        <h2>Post List</h2>\r\n        <div className=\"item-grid\">\r\n          {dataBaseItems.map((database, id) => (\r\n            <div className=\"insertedItem-short\" key={database.id}>\r\n              <p className=\"date\">{database.displayDate}</p>\r\n              <p> {database.post}</p>Added by: <i>{database.author}</i>\r\n              <br />\r\n              {updating ? (\r\n                <div>\r\n                  {\" \"}\r\n                  <p>Change post to:</p>\r\n                  <input\r\n                    value={editedEntry}\r\n                    onChange={(e) => setEditedEntry(e.target.value)}\r\n                  />{\" \"}\r\n                  <button\r\n                    onClick={(e) => {\r\n                      updateItem(database.id);\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n              <br />\r\n              <button\r\n                className=\"edit\"\r\n                onClick={(e) => {\r\n                  setUpdating(true);\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                className=\"delete\"\r\n                onClick={(e) => {\r\n                  deleteItem(database.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\navbar.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\ShowsToWatch.js",["89","90","91","92","93","94"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  updateDoc,\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  deleteDoc,\r\n  addDoc,\r\n  doc,\r\n} from \"firebase/firestore\";\r\nimport { useAuth } from \"./firebase\";\r\nimport { theDate } from \"./Utilities/theDate\";\r\n\r\nexport default function ShowsToWatch() {\r\n  const db = getFirestore();\r\n  const currentUser = useAuth();\r\n\r\n  const colRef = collection(db, \"currentShows\");\r\n  const [currentSeason, setcurrentSeason] = useState(\"\");\r\n  const [streaming_service, setStreaming_service] = useState(\"\");\r\n\r\n  const [dataBaseItems, setDatabaseItems] = useState([]);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [updatingSeason, setUpdatingSeason] = useState(false)\r\n  const [updatingStreamingService, setUpdatingStreamingService] =useState(false)\r\n  const [editedSeason,setEditedSeason] = useState(\"\")\r\n  const [editedEntry, setEditedEntry] = useState(\"\");\r\n  const [editedStreamingService, setEditedStreamingService] = useState(\"\")\r\n\r\n  const [form, setForm]= useState({\r\n    show: \"\",\r\n\r\n  });\r\n\r\n  function addItem(e) {\r\n    e.preventDefault();\r\n\r\n    addDoc(colRef, {\r\n      date: new Date(),\r\n      displayDate: theDate,\r\n      author: currentUser?.email,\r\n      show: form.show,\r\n      active: false,\r\n      completed: false,\r\n      currentSeason: currentSeason,\r\n      streaming_service:streaming_service\r\n    });\r\n    setcurrentSeason(\"\")\r\n\r\n    setForm({\r\n      ...form,\r\n      show: \"\",\r\n    });\r\n\r\n    fetchItems();\r\n  }\r\n\r\n  function fetchItems() {\r\n    getDocs(colRef).then((snapshot) => {\r\n      const items = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      console.log(items);\r\n      setDatabaseItems(items);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  function updateCurrentSeason(itemToUpdate) {\r\n    console.log(\"To be UPDATED \" + itemToUpdate);\r\n    if (itemToUpdate !== \"\") {\r\n      console.log(\"Updating\");\r\n      const docToUpdate = doc(db, \"currentShows\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        currentSeason: editedSeason,\r\n      }).then(() => {\r\n        console.log(\"It supposed to be updated\");\r\n      });\r\n      setUpdatingSeason(false);\r\n      setEditedSeason(\"\")\r\n      fetchItems();\r\n    }\r\n  }\r\n  function updateStreamingService(itemToUpdate) {\r\n    console.log(\"To be UPDATED \" + itemToUpdate);\r\n    if (itemToUpdate !== \"\") {\r\n      console.log(\"Updating\");\r\n      const docToUpdate = doc(db, \"currentShows\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        streaming_service: editedStreamingService,\r\n      }).then(() => {\r\n        console.log(\"It supposed to be updated\");\r\n      });\r\n      setUpdatingStreamingService(false);\r\n      setEditedStreamingService(\"\")\r\n      fetchItems();\r\n    }\r\n  }\r\n  function updateShow(itemToUpdate) {\r\n    console.log(\"To be UPDATED \" + itemToUpdate);\r\n    if (itemToUpdate !== \"\") {\r\n      console.log(\"Updating\");\r\n      const docToUpdate = doc(db, \"currentShows\", itemToUpdate);\r\n      if(editedEntry != \"\")\r\n      updateDoc(docToUpdate, {\r\n        show: editedEntry,\r\n      }).then(() => {\r\n        console.log(\"It supposed to be updated\");\r\n      });\r\n      setEditedEntry(\"\")\r\n      setUpdating(false);\r\n\r\n      fetchItems();\r\n    }\r\n  }\r\n  function toggleCompletetionStatus(completionStatus,itemToUpdate) {\r\n    if (itemToUpdate !== \"\") {\r\n      const docToUpdate = doc(db, \"currentShows\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        completed: completionStatus,\r\n      });\r\n    }\r\n    fetchItems();\r\n  }\r\n  function toggleActive(activeStatus,itemToUpdate) {\r\n    if (itemToUpdate !== \"\") {\r\n      const docToUpdate = doc(db, \"currentShows\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        active: activeStatus,\r\n      });\r\n    }\r\n    fetchItems();\r\n  }\r\n\r\n  function deleteItem(itemToDelete) {\r\n    console.log(\"To be Deleted \" + itemToDelete);\r\n    if (itemToDelete !== \"\") {\r\n      console.log(\"Deleting\");\r\n      const docToDelete = doc(db, \"currentShows\", itemToDelete);\r\n      deleteDoc(docToDelete).then(() => {\r\n        console.log(\"It supposed to be deleted\");\r\n      });\r\n      fetchItems();\r\n    }\r\n  }\r\n  const handleChange = (e) => {\r\n    const target = e.target;\r\n    var { name, value } = e.target;\r\n\r\n    if (name == \"expiry_date\" || name == \"foodType\" || name == \"quantityUnit\") {\r\n      value = target.value.toString();\r\n    } else {\r\n      value = target.name === \"should_refrigerate\" ? target.checked : target.value;\r\n    }\r\n\r\n    setForm({\r\n      ...form,\r\n      [name]: value,\r\n    });\r\n    console.log(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"category\" >\r\n      \r\n\r\n      <form className=\"post-component\">\r\n        <label>Show Name</label>\r\n        <input\r\n          rows=\"10\"\r\n          cols=\"70\"\r\n          value={form.show}\r\n          onChange={handleChange}\r\n          type=\"text\"\r\n          name=\"show\"\r\n          required\r\n        />\r\n        <br />\r\n        <label>Current Season</label>\r\n        <input \r\n        value={currentSeason}\r\n        onChange={(e)=>setcurrentSeason(e.target.value)}\r\n        type=\"text\"\r\n        name=\"currentSeason\"/>\r\n\r\n        <label>Streaming Service</label>\r\n        <input \r\n        value={streaming_service}\r\n        onChange={(e)=>setStreaming_service(e.target.value)}\r\n        type=\"text\"\r\n        name=\"currentSeason\"/>\r\n        <button className=\"add-post\" onClick={addItem}>Add show</button>\r\n      </form>\r\n      <div>\r\n        {\" \"}\r\n        <h2>Show List</h2>\r\n      <h3>Currently watching</h3>\r\n        <div className=\" item-grid\">\r\n          {dataBaseItems.map((database, id) => (\r\n            <div>{ database.active ?\r\n            <div className={updating || updatingSeason || updatingStreamingService? \"insertedItem-tall\" : \"insertedItem-short\"} key={database.id}>\r\n          <p className=\"show\">   {database.show}  <br/>   \r\n          {updating ?  <button  \r\n              className=\"cancel\"  \r\n              onClick={(e) => {\r\n                  setUpdating(false);\r\n                }}>Cancel</button> \r\n                  : <></>}\r\n           </p>  \r\n               <p> Current Season: {database.currentSeason }\r\n            <button\r\n                className=\"edit\"\r\n                onClick={(e) => {\r\n                  setUpdatingSeason(true);\r\n                  setUpdating(false)\r\n                  setUpdatingStreamingService(false)\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              {updatingSeason ?  <button  \r\n              className=\"cancel\"  \r\n              onClick={(e) => {\r\n                  setUpdatingSeason(false)\r\n                  \r\n                }}>Cancel</button>  : <></>}\r\n             \r\n              {updatingSeason ? (\r\n                <div>\r\n                  {\" \"}\r\n                  <p>Change season to:</p>\r\n                  <input\r\n                    value={editedSeason}\r\n                    onChange={(e) => setEditedSeason(e.target.value)}\r\n                  />{\" \"}\r\n                  <button\r\n                    onClick={(e) => {\r\n                      updateCurrentSeason(database.id);\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                 \r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}    \r\n          \r\n            </p>    \r\n            <p> Streaming Service: {database.streaming_service }\r\n            <button\r\n                className=\"edit\"\r\n                onClick={(e) => {\r\n                  setUpdatingStreamingService(true);\r\n                  setUpdating(false);\r\n                  setUpdatingSeason(false);\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              {updatingStreamingService ?  <button  \r\n              className=\"cancel\"  \r\n              onClick={(e) => {\r\n                  setUpdatingStreamingService(false)\r\n                }}>Cancel</button> : <></>}\r\n             \r\n              {updatingStreamingService ? (\r\n                <div>\r\n                  {\" \"}\r\n                  <p>Change streaming service to:</p>\r\n                  <input\r\n                    value={editedStreamingService}\r\n                    onChange={(e) => setEditedStreamingService(e.target.value)}\r\n                  />{\" \"}\r\n                  <button\r\n                    onClick={(e) => {\r\n                      updateStreamingService(database.id);\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                  \r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n            </p>  \r\n          <div className=\"active-buttons-container\">\r\n              <div \r\n                onClick={() => {\r\n                  toggleActive(!database.active,database.id);\r\n                }}\r\n              >\r\n                {database.active ? (\r\n                  <button className=\"activeStyleProgress\">In Progress</button>\r\n                ) : (\r\n                  <button className=\"inactiveStyleProgress\">Not In Progress</button>\r\n                )}\r\n              </div>\r\n              <div\r\n                onClick={() => {\r\n                  toggleCompletetionStatus(!database.completed,database.id);\r\n                }}\r\n              >\r\n                {database.completed ? (\r\n                  <button className=\"activeStyle\">Completed</button>\r\n                ) : (\r\n                  <button className=\"inactiveStyle\">Not Completed</button>\r\n                )}\r\n              </div>\r\n              </div>\r\n              <br />\r\n              <button\r\n                className=\"delete\"\r\n                onClick={(e) => {\r\n                  deleteItem(database.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n              <p>Added by: {database.author}</p>\r\n            </div> : <></>}\r\n            </div>\r\n          ))}\r\n          </div>\r\n          <br/>\r\n          <h3>Not currently watching</h3>\r\n          <div className=\" item-grid\">\r\n\r\n          {dataBaseItems.map((database, id) => (\r\n            <div>{ !database.active ?\r\n            <div className={updating || updatingSeason || updatingStreamingService? \"insertedItem-tall\" : \"insertedItem-short\"} key={database.id}>\r\n          <p className=\"show\">   {database.show}  <br/>   \r\n          {updating ?  <button  \r\n              className=\"cancel\"  \r\n              onClick={(e) => {\r\n                  setUpdating(false);\r\n                }}>Cancel</button> \r\n                  : <></>}\r\n           </p>  \r\n               <p> Current Season: {database.currentSeason }\r\n            <button\r\n                className=\"edit\"\r\n                onClick={(e) => {\r\n                  setUpdatingSeason(true);\r\n                  setUpdating(false)\r\n                  setUpdatingStreamingService(false)\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              {updatingSeason ?  <button  \r\n              className=\"cancel\"  \r\n              onClick={(e) => {\r\n                  setUpdatingSeason(false)\r\n                  \r\n                }}>Cancel</button>  : <></>}\r\n             \r\n              {updatingSeason ? (\r\n                <div>\r\n                  {\" \"}\r\n                  <p>Change season to:</p>\r\n                  <input\r\n                    value={editedSeason}\r\n                    onChange={(e) => setEditedSeason(e.target.value)}\r\n                  />{\" \"}\r\n                  <button\r\n                    onClick={(e) => {\r\n                      updateCurrentSeason(database.id);\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                 \r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}    \r\n          \r\n            </p>    \r\n            <p> Streaming Service: {database.streaming_service }\r\n            <button\r\n                className=\"edit\"\r\n                onClick={(e) => {\r\n                  setUpdatingStreamingService(true);\r\n                  setUpdating(false);\r\n                  setUpdatingSeason(false);\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              {updatingStreamingService ?  <button  \r\n              className=\"cancel\"  \r\n              onClick={(e) => {\r\n                  setUpdatingStreamingService(false)\r\n                }}>Cancel</button> : <></>}\r\n             \r\n              {updatingStreamingService ? (\r\n                <div>\r\n                  {\" \"}\r\n                  <p>Change streaming service to:</p>\r\n                  <input\r\n                    value={editedStreamingService}\r\n                    onChange={(e) => setEditedStreamingService(e.target.value)}\r\n                  />{\" \"}\r\n                  <button\r\n                    onClick={(e) => {\r\n                      updateStreamingService(database.id);\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                  \r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n\r\n            </p>  \r\n          \r\n          \r\n          \r\n          <div className=\"active-buttons-container\">\r\n              <div \r\n                onClick={() => {\r\n                  toggleActive(!database.active,database.id);\r\n                }}\r\n              >\r\n                {database.active ? (\r\n                  <button className=\"activeStyleProgress\">In Progress</button>\r\n                ) : (\r\n                  <button className=\"inactiveStyleProgress\">Not In Progress</button>\r\n                )}\r\n              </div>\r\n              <div\r\n                onClick={() => {\r\n                  toggleCompletetionStatus(!database.completed,database.id);\r\n                }}\r\n              >\r\n                {database.completed ? (\r\n                  <button className=\"activeStyle\">Completed</button>\r\n                ) : (\r\n                  <button className=\"inactiveStyle\">Not Completed</button>\r\n                )}\r\n              </div>\r\n              </div>\r\n              <br />\r\n              <button\r\n                className=\"delete\"\r\n                onClick={(e) => {\r\n                  deleteItem(database.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n              <p>Added by: {database.author}</p>\r\n            </div> : <></>}\r\n            </div>\r\n          ))}\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\CurrentSubScriptions.js",["95"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  updateDoc,\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  deleteDoc,\r\n  addDoc,\r\n  doc,\r\n} from \"firebase/firestore\";\r\nimport { useAuth } from \"./firebase\";\r\nimport { theDate } from \"./Utilities/theDate\";\r\n\r\nexport default function CurrentSubScriptions() {\r\n  const db = getFirestore();\r\n\r\n  const currentUser = useAuth();\r\n\r\n  const colRef = collection(db, \"currentSubscriptions\");\r\n\r\n  const [subscription, setSubscription] = useState(\"\");\r\n  const [dataBaseItems, setDatabaseItems] = useState([]);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [editedEntry, setEditedEntry] = useState(\"\");\r\n\r\n  function addSubscription(e) {\r\n    e.preventDefault();\r\n\r\n    addDoc(colRef, {\r\n      date: new Date(),\r\n      displayDate: theDate,\r\n      author: currentUser?.email,\r\n      subscription: subscription,\r\n      active: false,\r\n    });\r\n    setSubscription(\"\");\r\n    fetchSubscriptions();\r\n  }\r\n\r\n  function fetchSubscriptions() {\r\n    getDocs(colRef).then((snapshot) => {\r\n      const items = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      console.log(items);\r\n      setDatabaseItems(items);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    fetchSubscriptions();\r\n  }, []);\r\n\r\n  function updateSubscription(itemToUpdate) {\r\n    console.log(\"To be UPDATED \" + itemToUpdate);\r\n    if (itemToUpdate !== \"\") {\r\n      console.log(\"Updating\");\r\n      const docToUpdate = doc(db, \"currentSubscriptions\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        subscription: editedEntry,\r\n      }).then(() => {\r\n        console.log(\"It supposed to be updated\");\r\n      });\r\n      setUpdating(false);\r\n\r\n      fetchSubscriptions();\r\n    }\r\n  }\r\n\r\n  function toggleActiveSubscription(itemToUpdate,activeStatus) {\r\n    if (itemToUpdate !== \"\") {\r\n      const docToUpdate = doc(db, \"currentSubscriptions\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        active: activeStatus,\r\n      });\r\n\r\n      fetchSubscriptions();\r\n    }\r\n  }\r\n\r\n  function deleteSubscription(itemToDelete) {\r\n    console.log(\"To be Deleted \" + itemToDelete);\r\n    if (itemToDelete !== \"\") {\r\n      console.log(\"Deleting\");\r\n      const docToDelete = doc(db, \"currentSubscriptions\", itemToDelete);\r\n      deleteDoc(docToDelete).then(() => {\r\n        console.log(\"It supposed to be deleted\");\r\n      });\r\n      fetchSubscriptions();\r\n    }\r\n  }\r\n  return (\r\n    <div  className=\"category\">\r\n      <br />\r\n      <br />\r\n\r\n      <form className=\"post-component\">\r\n        <input\r\n          rows=\"10\"\r\n          cols=\"70\"\r\n          value={subscription}\r\n          onChange={(e) => setSubscription(e.target.value)}\r\n          type=\"text\"\r\n          name=\"subscription\"\r\n          required\r\n        />\r\n        <br />\r\n        <button className=\"add-post\" onClick={addSubscription}>Add Subscription</button>\r\n      </form>\r\n\r\n      <div >\r\n        {\" \"}\r\n        <h2>Subscription List</h2>\r\n      \r\n        <div className=\"item-grid\">\r\n          {dataBaseItems.map((database, id) => (\r\n            <div className={updating ? \"insertedItem-tall\" : \"insertedItem-short\"} key={database.id}>\r\n              <p className=\"date\">{database.displayDate}</p>\r\n              <p> {database.subscription}</p>Added by: <i>{database.author}</i>\r\n              <br />\r\n              <div\r\n                onClick={() => {\r\n                  toggleActiveSubscription(database.id,!database.active);\r\n                }}\r\n              >\r\n                {database.active ? (\r\n                  <button className=\"activeStyle\">Active</button>\r\n                ) : (\r\n                  <button className=\"inactiveStyle\">Innactive</button>\r\n                )}\r\n              </div>\r\n              {updating ? (\r\n                <div>\r\n                  {\" \"}\r\n                  <p>Change subscription to:</p>\r\n                  <input\r\n                    value={editedEntry}\r\n                    onChange={(e) => setEditedEntry(e.target.value)}\r\n                  />{\" \"}\r\n                  <button\r\n                    onClick={(e) => {\r\n                      updateSubscription( database.id );\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                  <button  \r\n              className=\"cancel\"  \r\n              onClick={(e) => {\r\n                  setUpdating(false);\r\n                }}>Cancel</button> \r\n                \r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n              <br />\r\n              <button\r\n              className=\"edit\"\r\n                onClick={(e) => {\r\n                  setUpdating(true);\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                className=\"delete\"\r\n                onClick={(itemToDelete) => {\r\n                  deleteSubscription(database.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\places.js",["96"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  deleteDoc,\r\n  addDoc,\r\n  doc,\r\n} from \"firebase/firestore\";\r\nimport { useAuth } from \"./firebase\";\r\nimport { theDate } from \"./Utilities/theDate\";\r\n\r\nexport default function Places() {\r\n  const db = getFirestore();\r\n\r\n  const currentUser = useAuth();\r\n\r\n  const colRef = collection(db, \"places\");\r\n\r\n  const [location, setLocation] = useState(\"\");\r\n  const [place, setPlace] = useState(\"\");\r\n  const [dataBaseItems, setDatabaseItems] = useState([]);\r\n\r\n  function addPlace(e) {\r\n    e.preventDefault();\r\n\r\n    addDoc(colRef, {\r\n      date: new Date(),\r\n      displayDate: theDate,\r\n      author: currentUser?.email,\r\n      place: place,\r\n      location: location,\r\n    });\r\n    setPlace(\"\");\r\n    setLocation(\"\");\r\n    fetchPlaces();\r\n  }\r\n\r\n  function fetchPlaces() {\r\n    getDocs(colRef).then((snapshot) => {\r\n      const items = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      console.log(items);\r\n\r\n      setDatabaseItems(items);\r\n      dataBaseItems.sort((a, b) => (b.joinDate < a.joinDate ? 1 : -1));\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    fetchPlaces();\r\n  }, []);\r\n\r\n  function deletePlace(itemToDelete) {\r\n    console.log(\"To be Deleted \" + itemToDelete);\r\n    if (itemToDelete !== \"\") {\r\n      console.log(\"Deleting\");\r\n      const docToDelete = doc(db, \"places\", itemToDelete);\r\n      deleteDoc(docToDelete).then(() => {\r\n        console.log(\"It supposed to be deleted\");\r\n      });\r\n      fetchPlaces();\r\n    }\r\n  }\r\n  return (\r\n    <div  className=\"category\">\r\n      <br />\r\n      <br />\r\n\r\n      <form className=\"post-component\">\r\n        <label>Place:</label>\r\n        <input\r\n          rows=\"10\"\r\n          cols=\"70\"\r\n          value={place}\r\n          onChange={(e) => setPlace(e.target.value)}\r\n          type=\"text\"\r\n          name=\"place\"\r\n          required\r\n        />\r\n\r\n        <br />\r\n        <label>Where:</label>\r\n        <input\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          value={location}\r\n          onChange={(e) => setLocation(e.target.value)}\r\n          type=\"text\"\r\n          name=\"place\"\r\n          required\r\n        />\r\n        <br />\r\n        <br />\r\n        <button className=\"add-post\" onClick={addPlace}> Add Place</button>\r\n      </form>\r\n\r\n      <div>\r\n        {\" \"}\r\n        <h1>Place List</h1>\r\n        <div className=\"item-grid\">\r\n          {dataBaseItems.map((database, id) => (\r\n            <div className=\"insertedItem-short\" key={database.id}>\r\n              <p>Place: {database.place} </p>\r\n              <p>Where: {database.location}</p>\r\n              <p>\r\n                Added by: <i>{database.author}</i>\r\n              </p>\r\n              <button\r\n                className=\"delete\"\r\n                onClick={(e) => {\r\n                  deletePlace(database.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\watch.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\activities.js",["97","98","99"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  updateDoc,\r\n  getFirestore,\r\n  collection,\r\n  getDocs,\r\n  deleteDoc,\r\n  addDoc,\r\n  doc,\r\n} from \"firebase/firestore\";\r\nimport { useAuth } from \"./firebase\";\r\nimport { theDate } from \"./Utilities/theDate\";\r\n\r\nexport default function Activities() {\r\n  const db = getFirestore();\r\n\r\n  const currentUser = useAuth();\r\n\r\n  const colRef = collection(db, \"activities\");\r\n\r\n  const [activity, setActivity] = useState(\"\");\r\n  const [dataBaseItems, setDatabaseItems] = useState([]);\r\n  const [itemToUpdate, setItemToUpdate] = useState(\"\");\r\n  const [updating, setUpdating] = useState(false);\r\n  const [editedEntry, setEditedEntry] = useState(\"\");\r\n\r\n  function addItem(e) {\r\n    e.preventDefault();\r\n\r\n    addDoc(colRef, {\r\n      date: new Date(),\r\n      displayDate: theDate,\r\n      author: currentUser?.email,\r\n      activity: activity,\r\n      active: false,\r\n    });\r\n    setActivity(\"\");\r\n    fetchItems();\r\n  }\r\n\r\n  function fetchItems() {\r\n    getDocs(colRef).then((snapshot) => {\r\n      const items = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      console.log(items);\r\n      setDatabaseItems(items);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  function updateItem(itemToUpdate) {\r\n    console.log(\"To be UPDATED \" + itemToUpdate);\r\n    if (itemToUpdate !== \"\") {\r\n      console.log(\"Updating\");\r\n      const docToUpdate = doc(db, \"activities\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        activity: editedEntry,\r\n      }).then(() => {\r\n        console.log(\"It supposed to be updated\");\r\n      });\r\n      setUpdating(false);\r\n\r\n      fetchItems();\r\n    }\r\n  }\r\n\r\n  function toggleDone(activeStat, item2Update) {\r\n    let itemToUpdate=item2Update;\r\n    let activeStatus =activeStat;\r\n\r\n      const docToUpdate = doc(db, \"activities\", itemToUpdate);\r\n      updateDoc(docToUpdate, {\r\n        active: activeStatus,\r\n      });\r\n    \r\n    fetchItems();\r\n  }\r\n\r\n  function deleteItem(itemToDelete) {\r\n    console.log(\"To be Deleted \" + itemToDelete);\r\n    if (itemToDelete !== \"\") {\r\n      console.log(\"Deleting\");\r\n      const docToDelete = doc(db, \"activities\", itemToDelete);\r\n      deleteDoc(docToDelete).then(() => {\r\n        console.log(\"It supposed to be deleted\");\r\n      });\r\n      fetchItems();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div  className=\"category\">\r\n      <br />\r\n      <br />\r\n\r\n      <form className=\"post-component\">\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          value={activity}\r\n          onChange={(e) => setActivity(e.target.value)}\r\n          type=\"text\"\r\n          name=\"activity\"\r\n          required\r\n        />\r\n        <br />\r\n        <button className=\"add-post\" onClick={addItem}>Add activity</button>\r\n      </form>\r\n\r\n      <div>\r\n        {\" \"}\r\n        <h1>Activity List</h1>\r\n      \r\n        <div className=\" item-grid\">\r\n          {dataBaseItems.map((database, id) => (\r\n            <div className=\"insertedItem-short\" key={database.id}>\r\n              <p> {database.activity}</p>Added by: <i>{database.author}</i>\r\n              <br />\r\n              <div\r\n                onClick={() => {\r\n                  toggleDone(!database.active,database.id);\r\n                }}\r\n              >\r\n                {database.active ? (\r\n                  <button className=\"activeStyle\">Done</button>\r\n                ) : (\r\n                  <button className=\"inactiveStyle\">Not Done</button>\r\n                )}\r\n              </div>\r\n              {updating ? (\r\n                <div>\r\n                  {\" \"}\r\n                  <p>Change activity to:</p>\r\n                  <textarea\r\n                    value={editedEntry}\r\n                    onChange={(e) => setEditedEntry(e.target.value)}\r\n                  />{\" \"}\r\n                  <button\r\n                    onClick={(e) => {\r\n                      updateItem(database.id);\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n              <br />\r\n              <button\r\n                className=\"edit\"\r\n                onClick={(e) => {\r\n                  setUpdating(true);\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                className=\"delete\"\r\n                onClick={(e) => {\r\n                  deleteItem(database.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\loggedOut.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\firebase.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\LoggedIn.js",["100","101"],"import { useAuth } from \"./firebase\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n//This is what appears if you are logged in. It offers links to various options.\r\nexport default function LoggedIn() {\r\n  const currentUser = useAuth();\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div>Hey: {currentUser?.email} </div>\r\n      <ul className=\" item-grid\">\r\n        <li  className=\"icon\">\r\n          <NavLink  to=\"/watch\">\r\n            {\" \"}\r\n            <img\r\n              src=\"https://icon-library.com/images/film-icon/film-icon-1.jpg\"\r\n              alt=\"65-656848-mentor-sentence-prep-at-home-clipart\"\r\n              width=\"150px\"\r\n              height=\"150px\"\r\n              className=\"writing-excercises-icons\"\r\n            />\r\n           <p className=\"icon-descriptor\"> Shows</p>\r\n\r\n            {\" \"}\r\n          </NavLink>\r\n        </li>\r\n        <li  className=\"icon\">\r\n          <NavLink  to=\"/randompost\">\r\n            {\" \"}\r\n            <img\r\n              src=\"https://i.ibb.co/RzmcpwH/soap-box-derby-soapbox-clip-art-openclipart-image-png-favpng-Pj-VB9ti-L1hnf45swquv-Ki5pcy.png\"\r\n              alt=\"soap-box-derby-soapbox-clip-art-openclipart-image-png-favpng-Pj-VB9ti-L1hnf45swquv-Ki5pcy\"\r\n              width=\"150px\"\r\n              height=\"150px\"\r\n              className=\"writing-excercises-icons\"\r\n            />\r\n            {\" \"}\r\n            <p className=\"icon-descriptor\"> Random Post</p>\r\n\r\n          </NavLink>\r\n        </li>\r\n        <li  className=\"icon\">\r\n          <NavLink to=\"/activities\">\r\n            {\" \"}\r\n            <img\r\n              width=\"150px\"\r\n              height=\"150px\"\r\n              src=\"https://i.ibb.co/d4F201T/72-720902-this-is-an-image-of-a-clipboard-do.png\"\r\n              alt=\"72-720902-this-is-an-image-of-a-clipboard-do\"\r\n              className=\"writing-excercises-icons\"\r\n            />\r\n           \r\n            <p className=\"icon-descriptor\">  Things to do</p>\r\n\r\n          </NavLink>\r\n        </li>\r\n        <li  className=\"icon\">\r\n          <NavLink  to=\"/places\">\r\n            {\" \"}\r\n            <img\r\n              width=\"150px\"\r\n              height=\"150px\"\r\n              src=\"https://i.ibb.co/71YRj5P/location-maps-navigation-pin-place-icon-location-icon-position-934743.png\"\r\n              alt=\"location-maps-navigation-pin-place-icon-location-icon-position-934743\"\r\n              className=\"writing-excercises-icons\"\r\n            />\r\n            <p className=\"icon-descriptor\">Places to go</p>\r\n\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\Utilities\\theDate.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\redux\\reducers\\index.js",["102"],"import { SET_LOGIN_STATUS } from \"../types\";\r\n\r\nconst INITIAL_STATE = {\r\n  loginStatus: false,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case SET_LOGIN_STATUS:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n\r\n    default:\r\n      return INITIAL_STATE;\r\n  }\r\n};\r\n","C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\redux\\actions\\index.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\auth.js",[],"C:\\Users\\18083\\Documents\\GitHub\\delaine-organizer-app\\src\\redux\\types\\index.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":53,"column":6,"nodeType":"109","endLine":53,"endColumn":8,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"108","line":70,"column":6,"nodeType":"109","endLine":70,"endColumn":8,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":102,"column":12,"nodeType":"114","messageId":"115","endLine":102,"endColumn":22},{"ruleId":"116","severity":1,"message":"117","line":107,"column":22,"nodeType":"118","messageId":"119","endLine":107,"endColumn":24},{"ruleId":"116","severity":1,"message":"120","line":153,"column":14,"nodeType":"118","messageId":"119","endLine":153,"endColumn":16},{"ruleId":"116","severity":1,"message":"120","line":153,"column":39,"nodeType":"118","messageId":"119","endLine":153,"endColumn":41},{"ruleId":"116","severity":1,"message":"120","line":153,"column":61,"nodeType":"118","messageId":"119","endLine":153,"endColumn":63},{"ruleId":"107","severity":1,"message":"121","line":52,"column":6,"nodeType":"109","endLine":52,"endColumn":8,"suggestions":"122"},{"ruleId":"107","severity":1,"message":"123","line":53,"column":6,"nodeType":"109","endLine":53,"endColumn":8,"suggestions":"124"},{"ruleId":"112","severity":1,"message":"125","line":23,"column":10,"nodeType":"114","messageId":"115","endLine":23,"endColumn":22},{"ruleId":"112","severity":1,"message":"126","line":23,"column":24,"nodeType":"114","messageId":"115","endLine":23,"endColumn":39},{"ruleId":"107","severity":1,"message":"108","line":53,"column":6,"nodeType":"109","endLine":53,"endColumn":8,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":30,"column":13,"nodeType":"130","endLine":36,"endColumn":15},{"ruleId":"128","severity":1,"message":"129","line":45,"column":13,"nodeType":"130","endLine":51,"endColumn":15},{"ruleId":"131","severity":1,"message":"132","line":7,"column":1,"nodeType":"133","endLine":18,"endColumn":3},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchItems'. Either include it or remove the dependency array.","ArrayExpression",["136"],["137"],"no-unused-vars","'updateShow' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'fetchSubscriptions'. Either include it or remove the dependency array.",["138"],"React Hook useEffect has a missing dependency: 'fetchPlaces'. Either include it or remove the dependency array.",["139"],"'itemToUpdate' is assigned a value but never used.","'setItemToUpdate' is assigned a value but never used.",["140"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"141","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"141","fix":"148"},"Update the dependencies array to be: [fetchItems]",{"range":"149","text":"150"},{"range":"151","text":"150"},"Update the dependencies array to be: [fetchSubscriptions]",{"range":"152","text":"153"},"Update the dependencies array to be: [fetchPlaces]",{"range":"154","text":"155"},{"range":"156","text":"150"},[1201,1203],"[fetchItems]",[1790,1792],[1277,1279],"[fetchSubscriptions]",[1216,1218],"[fetchPlaces]",[1262,1264]]